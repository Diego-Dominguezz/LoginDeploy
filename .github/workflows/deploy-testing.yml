name: Deploy to Testing Environment

on:
  push:
    branches: [develop, testing]
  workflow_dispatch:  # Permite ejecutar manualmente

jobs:
  # Job de CI - Se ejecuta siempre
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with Jest (Unit tests only)
        run: npm run test:unit:ci

      - name: Build Docker image (CI only)
        run: |
          docker build -t login-ejemplo:testing-ci .

  # Job de Build & Deploy Testing - Solo se ejecuta en push a develop/testing
  build-and-deploy-testing:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configura credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login a AWS ECR usando aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push imagen testing con Docker Bake
      - name: Build and push Testing image with Docker Bake
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if [ -f docker-bake.hcl ]; then
            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }} docker buildx bake --push testing-deploy
          else
            docker build -t ${{ steps.login-ecr.outputs.registry }}/login-ejemplo:testing --build-arg NODE_ENV=testing .
            docker push ${{ steps.login-ecr.outputs.registry }}/login-ejemplo:testing
          fi

      # Despliegue remoto en EC2 Testing vÃ­a SSH (solo pull y up, sin git pull)
      - name: Deploy on EC2 Testing via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_TESTING_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/LoginDeploy-Testing
            echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" > .env
            echo "IMAGE_TAG=testing" >> .env
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker compose -f docker-compose.testing.yml pull
            docker compose -f docker-compose.testing.yml up -d --remove-orphans
