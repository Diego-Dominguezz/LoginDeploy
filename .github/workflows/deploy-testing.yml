name: Deploy to Testing Environment

on:
  push:
    branches: [develop, testing]
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  # Job de CI - Se ejecuta siempre
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with Jest (Unit tests only)
        run: npm run test:unit:ci

      - name: Build Docker image (CI only)
        run: |
          docker build -t login-ejemplo:testing-ci .

  # Job de Build & Deploy Testing - Solo se ejecuta en push a develop/testing
  build-and-deploy-testing:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configura credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Public ECR for testing
      - name: Login to Public ECR
        id: login-ecr
        run: |
          aws ecr-public get-login-password --region us-east-2 | docker login --username AWS --password-stdin public.ecr.aws
          echo "registry=public.ecr.aws/diego-public" >> $GITHUB_OUTPUT

      # Build and push imagen testing con tags únicos
      - name: Build and push Testing image with unique tags
        env:
          ECR_REGISTRY: public.ecr.aws/diego-public
          IMAGE_TAG: testing-${{ github.sha }}-${{ github.run_number }}
        run: |
          echo "Building image with tag: $IMAGE_TAG"

          # Build con múltiples tags para forzar actualización
          docker build -t public.ecr.aws/diego-public/login-ejemplo:$IMAGE_TAG \
                       -t public.ecr.aws/diego-public/login-ejemplo:testing-latest \
                       -t public.ecr.aws/diego-public/login-ejemplo:testing \
                       --build-arg NODE_ENV=testing .

          # Push todas las versiones
          docker push public.ecr.aws/diego-public/login-ejemplo:$IMAGE_TAG
          docker push public.ecr.aws/diego-public/login-ejemplo:testing-latest  
          docker push public.ecr.aws/diego-public/login-ejemplo:testing

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Despliegue remoto en EC2 Testing vía SSH (solo pull y up, sin git pull)
      - name: Deploy on EC2 Testing via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_TESTING_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Crear directorio si no existe
            mkdir -p ~/LoginDeploy-Testing
            cd ~/LoginDeploy-Testing

            # Instalar AWS CLI si no está instalado
            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt update && sudo apt install -y unzip
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            # Instalar Docker si no está instalado
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo usermod -aG docker ubuntu
              # Reiniciar servicio Docker para asegurar que funcione
              sudo systemctl enable docker
              sudo systemctl restart docker
              sleep 5
            fi

            # Verificar si el usuario está en el grupo docker, si no agregarlo
            if ! groups | grep -q docker; then
              sudo usermod -aG docker ubuntu
              echo "Usuario agregado al grupo docker."
            fi

            # Crear docker-compose.testing.yml para testing con tag específico
            cat > docker-compose.testing.yml << EOFCOMPOSE
            services:
              mongodb-testing:
                image: mongo:7.0
                container_name: mongodb-testing
                restart: unless-stopped
                ports:
                  - "27017:27017"
                environment:
                  MONGO_INITDB_ROOT_USERNAME: admin
                  MONGO_INITDB_ROOT_PASSWORD: testing123
                  MONGO_INITDB_DATABASE: loginapp
                volumes:
                  - mongodb_data_testing:/data/db
                  - ./logs:/var/log/mongodb
                healthcheck:
                  test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
                  interval: 30s
                  timeout: 10s
                  retries: 5
                  start_period: 30s

              login-app-testing:
                image: public.ecr.aws/diego-public/login-ejemplo:testing-${{ github.sha }}-${{ github.run_number }}
                container_name: login-app-testing
                depends_on:
                  mongodb-testing:
                    condition: service_healthy
                ports:
                  - "80:3000"
                  - "8080:3000"
                environment:
                  - NODE_ENV=testing
                  - MONGODB_URI=mongodb://admin:testing123@mongodb-testing:27017/loginapp?authSource=admin
                  - PORT=3000
                restart: unless-stopped
                init: true
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 60s
                  timeout: 15s
                  retries: 5
                  start_period: 90s

            volumes:
              mongodb_data_testing:
                driver: local
            EOFCOMPOSE

            # Configurar credenciales AWS para este usuario
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"

            # Login a Public ECR y deploy con sudo
            echo "🔐 Logging in to Public ECR..."
            aws ecr-public get-login-password --region us-east-2 | sudo docker login --username AWS --password-stdin public.ecr.aws

            # Detener contenedores existentes
            echo "� Stopping existing containers..."
            sudo docker compose -f docker-compose.testing.yml down --remove-orphans || true

            # Limpiar imágenes viejas para forzar actualización
            echo "🧹 Cleaning old images..."
            sudo docker image prune -f
            sudo docker images | grep login-ejemplo | grep -v testing-${{ github.sha }}-${{ github.run_number }} | awk '{print $3}' | xargs -r sudo docker rmi -f || true

            echo "�📥 Pulling latest testing image with specific tag..."
            sudo docker compose -f docker-compose.testing.yml pull --no-parallel

            echo "🚀 Starting testing deployment with new image..."
            sudo docker compose -f docker-compose.testing.yml up -d --remove-orphans --force-recreate

            # Set up auto-start service (only needs to be done once, but safe to run multiple times)
            echo "🔧 Setting up auto-start service..."

            # Create systemd service file
            sudo tee /etc/systemd/system/login-app-testing.service > /dev/null << 'EOFSERVICE'
            [Unit]
            Description=Login App Testing Docker Compose
            Requires=docker.service
            After=docker.service

            [Service]
            Type=oneshot
            RemainAfterExit=yes
            WorkingDirectory=/home/ubuntu
            ExecStart=/usr/local/bin/docker-compose -f docker-compose.testing.yml up -d
            ExecStop=/usr/local/bin/docker-compose -f docker-compose.testing.yml down
            TimeoutStartSec=0
            User=ubuntu
            Group=docker

            [Install]
            WantedBy=multi-user.target
            EOFSERVICE

            # Enable the service (will start automatically on boot)
            sudo systemctl daemon-reload
            sudo systemctl enable login-app-testing.service

            echo "✅ Testing deployment completed!"
            echo "✅ Auto-start service enabled - app will restart automatically when EC2 reboots!"
            sudo docker compose -f docker-compose.testing.yml ps
