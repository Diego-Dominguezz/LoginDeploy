name: CI, Build & Deploy to AWS EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job de CI - Se ejecuta en push y PRs
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with Jest (Unit tests only)
        run: npm run test:unit:ci

      - name: Build Docker image (CI only)
        run: |
          docker build -t login-ejemplo:ci .

  # Job de Build & Deploy - Solo se ejecuta en push a main
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configura credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login a AWS ECR usando aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Instala dependencias y corre pruebas Jest
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with Jest (Unit tests only)
        run: npm run test:unit:ci

      # Build and push images (Docker Bake si existe, Compose si no)
      - name: Build and push Docker images (Bake or Compose)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if [ -f docker-bake.hcl ]; then
            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }} docker buildx bake --push production
          else
            docker build -t ${{ steps.login-ecr.outputs.registry }}/login-ejemplo:latest --build-arg NODE_ENV=production .
            docker push ${{ steps.login-ecr.outputs.registry }}/login-ejemplo:latest
          fi

      # Despliegue remoto en EC2 vía SSH (usando ECR)
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Crear directorio si no existe
            mkdir -p ~/LoginDeploy
            cd ~/LoginDeploy

            # Instalar AWS CLI si no está instalado
            if ! command -v aws &> /dev/null; then
              echo "📦 Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt update && sudo apt install -y unzip curl
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            fi

            # Instalar Docker si no está instalado
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              sudo apt update
              sudo apt install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo usermod -aG docker ubuntu
              sudo systemctl enable docker
              sudo systemctl restart docker
              sleep 5
            fi

            # Verificar si el usuario está en el grupo docker
            if ! groups | grep -q docker; then
              sudo usermod -aG docker ubuntu
              echo "⚠️ Usuario agregado al grupo docker."
            fi

            # Verificar configuración AWS
            echo "🔍 Checking AWS configuration..."
            if ! aws sts get-caller-identity > /dev/null 2>&1; then
              echo "❌ AWS credentials not configured. Please run 'aws configure' or attach IAM role to EC2"
              echo "💡 Required permissions: AmazonEC2ContainerRegistryReadOnly"
              exit 1
            fi

            # Crear docker-compose.yml para producción con ECR
            cat > docker-compose.yml << 'EOFCOMPOSE'
            services:
              login-app:
                image: ${{ steps.login-ecr.outputs.registry }}/login-ejemplo:latest
                ports:
                  - "80:3000"
                volumes:
                  - mongodb_data:/data/db
                  - ./logs:/var/log/mongodb
                environment:
                  - NODE_ENV=production
                  - MONGODB_URI=mongodb://localhost:27017/logindb
                restart: unless-stopped
                init: true
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 60s
                  timeout: 15s
                  retries: 5
                  start_period: 90s
            volumes:
              mongodb_data:
                driver: local
            EOFCOMPOSE

            # Login a ECR
            echo "� Logging in to ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Parar contenedores existentes
            echo "🛑 Stopping existing containers..."
            sudo docker compose down || true

            # Hacer pull de la imagen más reciente
            echo "📥 Pulling latest image from ECR..."
            sudo docker compose pull

            # Iniciar contenedores
            echo "🚀 Starting deployment..."
            sudo docker compose up -d --remove-orphans

            # Set up auto-start service
            echo "🔧 Setting up auto-start service..."
            sudo tee /etc/systemd/system/login-app.service > /dev/null << 'EOFSERVICE'
            [Unit]
            Description=Login App Production Docker Compose
            Requires=docker.service
            After=docker.service

            [Service]
            Type=oneshot
            RemainAfterExit=yes
            WorkingDirectory=/home/ubuntu/LoginDeploy
            ExecStart=/usr/bin/docker compose up -d
            ExecStop=/usr/bin/docker compose down
            TimeoutStartSec=0
            User=ubuntu
            Group=docker

            [Install]
            WantedBy=multi-user.target
            EOFSERVICE

            sudo systemctl daemon-reload
            sudo systemctl enable login-app.service

            echo "✅ Deployment completed!"
            echo "✅ Auto-start service enabled!"
            echo "🔍 Container status:"
            sudo docker compose ps
            echo "📋 Recent logs:"
            sudo docker compose logs --tail=20
